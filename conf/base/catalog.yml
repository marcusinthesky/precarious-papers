# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://kedro.readthedocs.io/en/stable/04_user_guide/04_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataSet
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataSet
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataSet
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different DataSet implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://kedro.readthedocs.io/en/stable/04_user_guide/04_catalog.html

secrets:
  type: yaml.YAMLDataSet
  filepath: conf/local/secrets.yml

# Paradise papers
## raw
paradise_edges:
  type: CachedDataSet
  versioned: true
  dataset:
    type: pandas.CSVDataSet
    filepath: data/01_raw/csv_paradise_papers.2018-02-14/paradise_papers.edges.csv

paradise_nodes_address:
  type: pandas.CSVDataSet
  filepath: data/01_raw/csv_paradise_papers.2018-02-14/paradise_papers.nodes.address.csv

paradise_nodes_entity:
  type: pandas.CSVDataSet
  filepath: data/01_raw/csv_paradise_papers.2018-02-14/paradise_papers.nodes.entity.csv

paradise_nodes_intermediary:
  type: pandas.CSVDataSet
  filepath: data/01_raw/csv_paradise_papers.2018-02-14/paradise_papers.nodes.intermediary.csv

paradise_nodes_officer:
  type: pandas.CSVDataSet
  filepath: data/01_raw/csv_paradise_papers.2018-02-14/paradise_papers.nodes.officer.csv

paradise_nodes_other:
  type: pandas.CSVDataSet
  filepath: data/01_raw/csv_paradise_papers.2018-02-14/paradise_papers.nodes.other.csv

indices:
  type: pandas.CSVDataSet
  filepath: data/01_raw/exchange_prices.csv
  load_args:
    parse_dates:
      - Date
    index_col:
      - Date

## intermediate
paradise_price:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/paradise_papers_price.parquet
  versioned: True

paradise_graph:
  type: CachedDataSet
  versioned: true
  dataset:
    type: networkx.NetworkXDataSet
    filepath: data/02_intermediate/paradise_papers_graph.json

balance_sheet:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/balance_sheet.parquet
  versioned: True

income_statement:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/income_statement.parquet
  versioned: True

market_cap:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/market_cap.parquet
  versioned: True

# IEX Symbols
symbols:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/iex_symbols.parquet
  versioned: True

entities:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/entities.parquet
  versioned: True

iex_matched_entities:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/iex_matched_symbols.parquet
  versioned: True

paradise_distances:
  type: pandas.ParquetDataSet
  filepath: data/03_primary/renamed_distances.parquet
  versioned: True

D:
  type: pandas.ParquetDataSet
  filepath: data/04_features/D.parquet
  versioned: True

feature:
  type: pandas.ParquetDataSet
  filepath: data/04_features/feature.parquet
  versioned: True

centrality:
  type: pandas.ParquetDataSet
  filepath: data/04_features/centrality.parquet
  versioned: True

X:
  type: pandas.ParquetDataSet
  filepath: data/05_model_input/X.parquet
  versioned: True

y:
  type: pandas.ParquetDataSet
  filepath: data/05_model_input/y.parquet
  versioned: True

W:
  type: pandas.ParquetDataSet
  filepath: data/05_model_input/W.parquet
  versioned: True

WX:
  type: pandas.ParquetDataSet
  filepath: data/05_model_input/WX.parquet
  versioned: True

nonspatialpearson:
  type: pandas.CSVDataSet
  filepath: data/08_reporting/nonspatialpearson.csv
  versioned: True

nonspatialspatialpearson:
  type: pandas.CSVDataSet
  filepath: data/08_reporting/nonspatialspatialpearson.csv
  versioned: True

spatialpearson:
  type: pandas.CSVDataSet
  filepath: data/08_reporting/spatialpearson.csv
  versioned: True

biplot:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/biplot.png
  save_args:
    dpi: 700

explained_variance:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/explained_variance.png
  save_args:
    dpi: 700

nonspatialresults:
  type: pandas.CSVDataSet
  filepath: data/08_reporting/nonspatialresults.csv
  versioned: True

spatialresults:
  type: pandas.CSVDataSet
  filepath: data/08_reporting/spatialresults.csv
  versioned: True

returns_weibull_gft:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/returns_weibull_gft.png
  save_args:
    dpi: 700

top_magnitude_frequencies:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/top-magnitude-frequencies.png
  save_args:
    dpi: 700

lowest_frequencies:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/lowest-frequencies.png
  save_args:
    dpi: 700

slx_leverage:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/slx_leverage.png

slx_cooks_distance:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/slx_cooks_distance.png
  save_args:
    dpi: 700

slx_cooks_graph:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/slx_cooks_graph.png
  save_args:
    dpi: 700

slx_pca_cooks:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/slx_pca_cooks.png
  save_args:
    dpi: 700

slx_pca_explained:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/slx_pca_explained.png
  save_args:
    dpi: 700

slx_clustered_graph:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/slx_clustered_graph.png
  save_args:
    dpi: 700

slx_pca_clustered:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/slx_pca_clustered.png
  save_args:
    dpi: 700

slx_cluster_model:
  type: pickle.PickleDataSet
  filepath: data/06_models/slx_cluster_model.pkl

slx_pca_model:
  type: pickle.PickleDataSet
  filepath: data/06_models/slx_pca_model.pkl

ols_leverage:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/ols_leverage.png

ols_cooks_distance:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/ols_cooks_distance.png
  save_args:
    dpi: 700

ols_cooks_graph:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/ols_cooks_graph.png
  save_args:
    dpi: 700

ols_pca_cooks:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/ols_pca_cooks.png
  save_args:
    dpi: 700

ols_pca_explained:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/ols_pca_explained.png
  save_args:
    dpi: 700

ols_clustered_graph:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/ols_clustered_graph.png
  save_args:
    dpi: 700

ols_pca_clustered:
  type: holoviews.HoloviewsWriter
  filepath: data/08_reporting/ols_pca_clustered.png
  save_args:
    dpi: 700

ols_cluster_model:
  type: pickle.PickleDataSet
  filepath: data/06_models/ols_cluster_model.pkl

ols_pca_model:
  type: pickle.PickleDataSet
  filepath: data/06_models/ols_pca_model.pkl
